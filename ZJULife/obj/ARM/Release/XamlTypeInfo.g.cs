//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace ZJULife
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::ZJULife.ZJULife_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::ZJULife.ZJULife_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::ZJULife.ZJULife_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace ZJULife.ZJULife_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[30];
            _typeNameTable[0] = "ZJULife.About";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[2] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[3] = "ZJULife.Common.NavigationHelper";
            _typeNameTable[4] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[5] = "ZJULife.Common.ObservableDictionary";
            _typeNameTable[6] = "Object";
            _typeNameTable[7] = "String";
            _typeNameTable[8] = "ZJULife.AppRecommend";
            _typeNameTable[9] = "ZJULife.Converters.PassedStopsConverter";
            _typeNameTable[10] = "ZJULife.Converters.TimeConverter";
            _typeNameTable[11] = "ZJULife.Converters.WidthConverter";
            _typeNameTable[12] = "ZJULife.BusQuery";
            _typeNameTable[13] = "Syncfusion.UI.Xaml.Controls.Layout.SfAccordion";
            _typeNameTable[14] = "Windows.UI.Xaml.Controls.ItemsControl";
            _typeNameTable[15] = "Syncfusion.UI.Xaml.Controls.Layout.AccordionSelectionMode";
            _typeNameTable[16] = "System.Enum";
            _typeNameTable[17] = "System.ValueType";
            _typeNameTable[18] = "Windows.UI.Xaml.Media.SolidColorBrush";
            _typeNameTable[19] = "Windows.UI.Xaml.DataTemplate";
            _typeNameTable[20] = "Windows.UI.Xaml.Controls.DataTemplateSelector";
            _typeNameTable[21] = "Int32";
            _typeNameTable[22] = "System.Collections.IList";
            _typeNameTable[23] = "System.Collections.Generic.IList`1<Int32>";
            _typeNameTable[24] = "Windows.UI.Xaml.Style";
            _typeNameTable[25] = "ZJULife.Converters.SourceConverter";
            _typeNameTable[26] = "ZJULife.Map";
            _typeNameTable[27] = "ZJULife.SearchPage";
            _typeNameTable[28] = "ZJULife.ItemPage";
            _typeNameTable[29] = "ZJULife.PivotPage";

            _typeTable = new global::System.Type[30];
            _typeTable[0] = typeof(global::ZJULife.About);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[3] = typeof(global::ZJULife.Common.NavigationHelper);
            _typeTable[4] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[5] = typeof(global::ZJULife.Common.ObservableDictionary);
            _typeTable[6] = typeof(global::System.Object);
            _typeTable[7] = typeof(global::System.String);
            _typeTable[8] = typeof(global::ZJULife.AppRecommend);
            _typeTable[9] = typeof(global::ZJULife.Converters.PassedStopsConverter);
            _typeTable[10] = typeof(global::ZJULife.Converters.TimeConverter);
            _typeTable[11] = typeof(global::ZJULife.Converters.WidthConverter);
            _typeTable[12] = typeof(global::ZJULife.BusQuery);
            _typeTable[13] = typeof(global::Syncfusion.UI.Xaml.Controls.Layout.SfAccordion);
            _typeTable[14] = typeof(global::Windows.UI.Xaml.Controls.ItemsControl);
            _typeTable[15] = typeof(global::Syncfusion.UI.Xaml.Controls.Layout.AccordionSelectionMode);
            _typeTable[16] = typeof(global::System.Enum);
            _typeTable[17] = typeof(global::System.ValueType);
            _typeTable[18] = typeof(global::Windows.UI.Xaml.Media.SolidColorBrush);
            _typeTable[19] = typeof(global::Windows.UI.Xaml.DataTemplate);
            _typeTable[20] = typeof(global::Windows.UI.Xaml.Controls.DataTemplateSelector);
            _typeTable[21] = typeof(global::System.Int32);
            _typeTable[22] = typeof(global::System.Collections.IList);
            _typeTable[23] = typeof(global::System.Collections.Generic.IList<global::System.Int32>);
            _typeTable[24] = typeof(global::Windows.UI.Xaml.Style);
            _typeTable[25] = typeof(global::ZJULife.Converters.SourceConverter);
            _typeTable[26] = typeof(global::ZJULife.Map);
            _typeTable[27] = typeof(global::ZJULife.SearchPage);
            _typeTable[28] = typeof(global::ZJULife.ItemPage);
            _typeTable[29] = typeof(global::ZJULife.PivotPage);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_About() { return new global::ZJULife.About(); }
        private object Activate_5_ObservableDictionary() { return new global::ZJULife.Common.ObservableDictionary(); }
        private object Activate_8_AppRecommend() { return new global::ZJULife.AppRecommend(); }
        private object Activate_9_PassedStopsConverter() { return new global::ZJULife.Converters.PassedStopsConverter(); }
        private object Activate_10_TimeConverter() { return new global::ZJULife.Converters.TimeConverter(); }
        private object Activate_11_WidthConverter() { return new global::ZJULife.Converters.WidthConverter(); }
        private object Activate_12_BusQuery() { return new global::ZJULife.BusQuery(); }
        private object Activate_13_SfAccordion() { return new global::Syncfusion.UI.Xaml.Controls.Layout.SfAccordion(); }
        private object Activate_25_SourceConverter() { return new global::ZJULife.Converters.SourceConverter(); }
        private object Activate_26_Map() { return new global::ZJULife.Map(); }
        private object Activate_27_SearchPage() { return new global::ZJULife.SearchPage(); }
        private object Activate_28_ItemPage() { return new global::ZJULife.ItemPage(); }
        private object Activate_29_PivotPage() { return new global::ZJULife.PivotPage(); }
        private void MapAdd_5_ObservableDictionary(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_23_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Int32>)instance;
            var newItem = (global::System.Int32)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::ZJULife.ZJULife_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  ZJULife.About
                userType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_About;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  ZJULife.Common.NavigationHelper
                userType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  ZJULife.Common.ObservableDictionary
                userType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.DictionaryAdd = MapAdd_5_ObservableDictionary;
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  Object
                xamlType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  String
                xamlType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  ZJULife.AppRecommend
                userType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_8_AppRecommend;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  ZJULife.Converters.PassedStopsConverter
                userType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_9_PassedStopsConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  ZJULife.Converters.TimeConverter
                userType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_10_TimeConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  ZJULife.Converters.WidthConverter
                userType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_11_WidthConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 12:   //  ZJULife.BusQuery
                userType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_12_BusQuery;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  Syncfusion.UI.Xaml.Controls.Layout.SfAccordion
                userType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.ItemsControl"));
                userType.Activator = Activate_13_SfAccordion;
                userType.AddMemberName("SelectionMode");
                userType.AddMemberName("AccentBrush");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("ContentTemplate");
                userType.AddMemberName("HeaderTemplateSelector");
                userType.AddMemberName("ContentTemplateSelector");
                userType.AddMemberName("SelectedItem");
                userType.AddMemberName("SelectedIndex");
                userType.AddMemberName("SelectedItems");
                userType.AddMemberName("SelectedIndices");
                userType.AddMemberName("ItemContainerStyle");
                xamlType = userType;
                break;

            case 14:   //  Windows.UI.Xaml.Controls.ItemsControl
                xamlType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  Syncfusion.UI.Xaml.Controls.Layout.AccordionSelectionMode
                userType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("One", global::Syncfusion.UI.Xaml.Controls.Layout.AccordionSelectionMode.One);
                userType.AddEnumValue("OneOrMore", global::Syncfusion.UI.Xaml.Controls.Layout.AccordionSelectionMode.OneOrMore);
                userType.AddEnumValue("ZeroOrOne", global::Syncfusion.UI.Xaml.Controls.Layout.AccordionSelectionMode.ZeroOrOne);
                userType.AddEnumValue("ZeroOrMore", global::Syncfusion.UI.Xaml.Controls.Layout.AccordionSelectionMode.ZeroOrMore);
                xamlType = userType;
                break;

            case 16:   //  System.Enum
                userType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 17:   //  System.ValueType
                userType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 18:   //  Windows.UI.Xaml.Media.SolidColorBrush
                xamlType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  Windows.UI.Xaml.DataTemplate
                xamlType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 20:   //  Windows.UI.Xaml.Controls.DataTemplateSelector
                xamlType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 21:   //  Int32
                xamlType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 22:   //  System.Collections.IList
                userType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 23:   //  System.Collections.Generic.IList`1<Int32>
                userType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_23_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 24:   //  Windows.UI.Xaml.Style
                xamlType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 25:   //  ZJULife.Converters.SourceConverter
                userType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_25_SourceConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 26:   //  ZJULife.Map
                userType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_26_Map;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 27:   //  ZJULife.SearchPage
                userType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_27_SearchPage;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  ZJULife.ItemPage
                userType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_28_ItemPage;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  ZJULife.PivotPage
                userType = new global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_29_PivotPage;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Syncfusion.SfAccordion.WP.Syncfusion_SfAccordion_WP_2013_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Syncfusion.SfShared.WP.Syncfusion_SfShared_WP_2013_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_About_NavigationHelper(object instance)
        {
            var that = (global::ZJULife.About)instance;
            return that.NavigationHelper;
        }
        private object get_1_About_DefaultViewModel(object instance)
        {
            var that = (global::ZJULife.About)instance;
            return that.DefaultViewModel;
        }
        private object get_2_AppRecommend_NavigationHelper(object instance)
        {
            var that = (global::ZJULife.AppRecommend)instance;
            return that.NavigationHelper;
        }
        private object get_3_AppRecommend_DefaultViewModel(object instance)
        {
            var that = (global::ZJULife.AppRecommend)instance;
            return that.DefaultViewModel;
        }
        private object get_4_BusQuery_NavigationHelper(object instance)
        {
            var that = (global::ZJULife.BusQuery)instance;
            return that.NavigationHelper;
        }
        private object get_5_BusQuery_DefaultViewModel(object instance)
        {
            var that = (global::ZJULife.BusQuery)instance;
            return that.DefaultViewModel;
        }
        private object get_6_SfAccordion_SelectionMode(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Controls.Layout.SfAccordion)instance;
            return that.SelectionMode;
        }
        private void set_6_SfAccordion_SelectionMode(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Controls.Layout.SfAccordion)instance;
            that.SelectionMode = (global::Syncfusion.UI.Xaml.Controls.Layout.AccordionSelectionMode)Value;
        }
        private object get_7_SfAccordion_AccentBrush(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Controls.Layout.SfAccordion)instance;
            return that.AccentBrush;
        }
        private void set_7_SfAccordion_AccentBrush(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Controls.Layout.SfAccordion)instance;
            that.AccentBrush = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_8_SfAccordion_HeaderTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Controls.Layout.SfAccordion)instance;
            return that.HeaderTemplate;
        }
        private void set_8_SfAccordion_HeaderTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Controls.Layout.SfAccordion)instance;
            that.HeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_9_SfAccordion_ContentTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Controls.Layout.SfAccordion)instance;
            return that.ContentTemplate;
        }
        private void set_9_SfAccordion_ContentTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Controls.Layout.SfAccordion)instance;
            that.ContentTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_10_SfAccordion_HeaderTemplateSelector(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Controls.Layout.SfAccordion)instance;
            return that.HeaderTemplateSelector;
        }
        private void set_10_SfAccordion_HeaderTemplateSelector(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Controls.Layout.SfAccordion)instance;
            that.HeaderTemplateSelector = (global::Windows.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_11_SfAccordion_ContentTemplateSelector(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Controls.Layout.SfAccordion)instance;
            return that.ContentTemplateSelector;
        }
        private void set_11_SfAccordion_ContentTemplateSelector(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Controls.Layout.SfAccordion)instance;
            that.ContentTemplateSelector = (global::Windows.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_12_SfAccordion_SelectedItem(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Controls.Layout.SfAccordion)instance;
            return that.SelectedItem;
        }
        private void set_12_SfAccordion_SelectedItem(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Controls.Layout.SfAccordion)instance;
            that.SelectedItem = (global::System.Object)Value;
        }
        private object get_13_SfAccordion_SelectedIndex(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Controls.Layout.SfAccordion)instance;
            return that.SelectedIndex;
        }
        private void set_13_SfAccordion_SelectedIndex(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Controls.Layout.SfAccordion)instance;
            that.SelectedIndex = (global::System.Int32)Value;
        }
        private object get_14_SfAccordion_SelectedItems(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Controls.Layout.SfAccordion)instance;
            return that.SelectedItems;
        }
        private object get_15_SfAccordion_SelectedIndices(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Controls.Layout.SfAccordion)instance;
            return that.SelectedIndices;
        }
        private object get_16_SfAccordion_ItemContainerStyle(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Controls.Layout.SfAccordion)instance;
            return that.ItemContainerStyle;
        }
        private void set_16_SfAccordion_ItemContainerStyle(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Controls.Layout.SfAccordion)instance;
            that.ItemContainerStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_17_Map_NavigationHelper(object instance)
        {
            var that = (global::ZJULife.Map)instance;
            return that.NavigationHelper;
        }
        private object get_18_Map_DefaultViewModel(object instance)
        {
            var that = (global::ZJULife.Map)instance;
            return that.DefaultViewModel;
        }
        private object get_19_SearchPage_NavigationHelper(object instance)
        {
            var that = (global::ZJULife.SearchPage)instance;
            return that.NavigationHelper;
        }
        private object get_20_SearchPage_DefaultViewModel(object instance)
        {
            var that = (global::ZJULife.SearchPage)instance;
            return that.DefaultViewModel;
        }
        private object get_21_ItemPage_NavigationHelper(object instance)
        {
            var that = (global::ZJULife.ItemPage)instance;
            return that.NavigationHelper;
        }
        private object get_22_ItemPage_DefaultViewModel(object instance)
        {
            var that = (global::ZJULife.ItemPage)instance;
            return that.DefaultViewModel;
        }
        private object get_23_PivotPage_NavigationHelper(object instance)
        {
            var that = (global::ZJULife.PivotPage)instance;
            return that.NavigationHelper;
        }
        private object get_24_PivotPage_DefaultViewModel(object instance)
        {
            var that = (global::ZJULife.PivotPage)instance;
            return that.DefaultViewModel;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::ZJULife.ZJULife_XamlTypeInfo.XamlMember xamlMember = null;
            global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "ZJULife.About.NavigationHelper":
                userType = (global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ZJULife.About");
                xamlMember = new global::ZJULife.ZJULife_XamlTypeInfo.XamlMember(this, "NavigationHelper", "ZJULife.Common.NavigationHelper");
                xamlMember.Getter = get_0_About_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "ZJULife.About.DefaultViewModel":
                userType = (global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ZJULife.About");
                xamlMember = new global::ZJULife.ZJULife_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "ZJULife.Common.ObservableDictionary");
                xamlMember.Getter = get_1_About_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "ZJULife.AppRecommend.NavigationHelper":
                userType = (global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ZJULife.AppRecommend");
                xamlMember = new global::ZJULife.ZJULife_XamlTypeInfo.XamlMember(this, "NavigationHelper", "ZJULife.Common.NavigationHelper");
                xamlMember.Getter = get_2_AppRecommend_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "ZJULife.AppRecommend.DefaultViewModel":
                userType = (global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ZJULife.AppRecommend");
                xamlMember = new global::ZJULife.ZJULife_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "ZJULife.Common.ObservableDictionary");
                xamlMember.Getter = get_3_AppRecommend_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "ZJULife.BusQuery.NavigationHelper":
                userType = (global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ZJULife.BusQuery");
                xamlMember = new global::ZJULife.ZJULife_XamlTypeInfo.XamlMember(this, "NavigationHelper", "ZJULife.Common.NavigationHelper");
                xamlMember.Getter = get_4_BusQuery_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "ZJULife.BusQuery.DefaultViewModel":
                userType = (global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ZJULife.BusQuery");
                xamlMember = new global::ZJULife.ZJULife_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "ZJULife.Common.ObservableDictionary");
                xamlMember.Getter = get_5_BusQuery_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Controls.Layout.SfAccordion.SelectionMode":
                userType = (global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Controls.Layout.SfAccordion");
                xamlMember = new global::ZJULife.ZJULife_XamlTypeInfo.XamlMember(this, "SelectionMode", "Syncfusion.UI.Xaml.Controls.Layout.AccordionSelectionMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_SfAccordion_SelectionMode;
                xamlMember.Setter = set_6_SfAccordion_SelectionMode;
                break;
            case "Syncfusion.UI.Xaml.Controls.Layout.SfAccordion.AccentBrush":
                userType = (global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Controls.Layout.SfAccordion");
                xamlMember = new global::ZJULife.ZJULife_XamlTypeInfo.XamlMember(this, "AccentBrush", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_SfAccordion_AccentBrush;
                xamlMember.Setter = set_7_SfAccordion_AccentBrush;
                break;
            case "Syncfusion.UI.Xaml.Controls.Layout.SfAccordion.HeaderTemplate":
                userType = (global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Controls.Layout.SfAccordion");
                xamlMember = new global::ZJULife.ZJULife_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_SfAccordion_HeaderTemplate;
                xamlMember.Setter = set_8_SfAccordion_HeaderTemplate;
                break;
            case "Syncfusion.UI.Xaml.Controls.Layout.SfAccordion.ContentTemplate":
                userType = (global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Controls.Layout.SfAccordion");
                xamlMember = new global::ZJULife.ZJULife_XamlTypeInfo.XamlMember(this, "ContentTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_SfAccordion_ContentTemplate;
                xamlMember.Setter = set_9_SfAccordion_ContentTemplate;
                break;
            case "Syncfusion.UI.Xaml.Controls.Layout.SfAccordion.HeaderTemplateSelector":
                userType = (global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Controls.Layout.SfAccordion");
                xamlMember = new global::ZJULife.ZJULife_XamlTypeInfo.XamlMember(this, "HeaderTemplateSelector", "Windows.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_SfAccordion_HeaderTemplateSelector;
                xamlMember.Setter = set_10_SfAccordion_HeaderTemplateSelector;
                break;
            case "Syncfusion.UI.Xaml.Controls.Layout.SfAccordion.ContentTemplateSelector":
                userType = (global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Controls.Layout.SfAccordion");
                xamlMember = new global::ZJULife.ZJULife_XamlTypeInfo.XamlMember(this, "ContentTemplateSelector", "Windows.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_SfAccordion_ContentTemplateSelector;
                xamlMember.Setter = set_11_SfAccordion_ContentTemplateSelector;
                break;
            case "Syncfusion.UI.Xaml.Controls.Layout.SfAccordion.SelectedItem":
                userType = (global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Controls.Layout.SfAccordion");
                xamlMember = new global::ZJULife.ZJULife_XamlTypeInfo.XamlMember(this, "SelectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_SfAccordion_SelectedItem;
                xamlMember.Setter = set_12_SfAccordion_SelectedItem;
                break;
            case "Syncfusion.UI.Xaml.Controls.Layout.SfAccordion.SelectedIndex":
                userType = (global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Controls.Layout.SfAccordion");
                xamlMember = new global::ZJULife.ZJULife_XamlTypeInfo.XamlMember(this, "SelectedIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_SfAccordion_SelectedIndex;
                xamlMember.Setter = set_13_SfAccordion_SelectedIndex;
                break;
            case "Syncfusion.UI.Xaml.Controls.Layout.SfAccordion.SelectedItems":
                userType = (global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Controls.Layout.SfAccordion");
                xamlMember = new global::ZJULife.ZJULife_XamlTypeInfo.XamlMember(this, "SelectedItems", "System.Collections.IList");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_SfAccordion_SelectedItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Controls.Layout.SfAccordion.SelectedIndices":
                userType = (global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Controls.Layout.SfAccordion");
                xamlMember = new global::ZJULife.ZJULife_XamlTypeInfo.XamlMember(this, "SelectedIndices", "System.Collections.Generic.IList`1<Int32>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_SfAccordion_SelectedIndices;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Controls.Layout.SfAccordion.ItemContainerStyle":
                userType = (global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Controls.Layout.SfAccordion");
                xamlMember = new global::ZJULife.ZJULife_XamlTypeInfo.XamlMember(this, "ItemContainerStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_SfAccordion_ItemContainerStyle;
                xamlMember.Setter = set_16_SfAccordion_ItemContainerStyle;
                break;
            case "ZJULife.Map.NavigationHelper":
                userType = (global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ZJULife.Map");
                xamlMember = new global::ZJULife.ZJULife_XamlTypeInfo.XamlMember(this, "NavigationHelper", "ZJULife.Common.NavigationHelper");
                xamlMember.Getter = get_17_Map_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "ZJULife.Map.DefaultViewModel":
                userType = (global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ZJULife.Map");
                xamlMember = new global::ZJULife.ZJULife_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "ZJULife.Common.ObservableDictionary");
                xamlMember.Getter = get_18_Map_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "ZJULife.SearchPage.NavigationHelper":
                userType = (global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ZJULife.SearchPage");
                xamlMember = new global::ZJULife.ZJULife_XamlTypeInfo.XamlMember(this, "NavigationHelper", "ZJULife.Common.NavigationHelper");
                xamlMember.Getter = get_19_SearchPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "ZJULife.SearchPage.DefaultViewModel":
                userType = (global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ZJULife.SearchPage");
                xamlMember = new global::ZJULife.ZJULife_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "ZJULife.Common.ObservableDictionary");
                xamlMember.Getter = get_20_SearchPage_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "ZJULife.ItemPage.NavigationHelper":
                userType = (global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ZJULife.ItemPage");
                xamlMember = new global::ZJULife.ZJULife_XamlTypeInfo.XamlMember(this, "NavigationHelper", "ZJULife.Common.NavigationHelper");
                xamlMember.Getter = get_21_ItemPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "ZJULife.ItemPage.DefaultViewModel":
                userType = (global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ZJULife.ItemPage");
                xamlMember = new global::ZJULife.ZJULife_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "ZJULife.Common.ObservableDictionary");
                xamlMember.Getter = get_22_ItemPage_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "ZJULife.PivotPage.NavigationHelper":
                userType = (global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ZJULife.PivotPage");
                xamlMember = new global::ZJULife.ZJULife_XamlTypeInfo.XamlMember(this, "NavigationHelper", "ZJULife.Common.NavigationHelper");
                xamlMember.Getter = get_23_PivotPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "ZJULife.PivotPage.DefaultViewModel":
                userType = (global::ZJULife.ZJULife_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ZJULife.PivotPage");
                xamlMember = new global::ZJULife.ZJULife_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "ZJULife.Common.ObservableDictionary");
                xamlMember.Getter = get_24_PivotPage_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::ZJULife.ZJULife_XamlTypeInfo.XamlSystemBaseType
    {
        global::ZJULife.ZJULife_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::ZJULife.ZJULife_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::ZJULife.ZJULife_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::ZJULife.ZJULife_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


